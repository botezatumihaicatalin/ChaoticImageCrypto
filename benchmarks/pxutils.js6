import _ from "lodash"

class PixelsUtils {

  chiSquareTest(pixels, spectrum = 3) {
    const frequencies = _.times(spectrum, () => {
      return _.times(256, () => 0)
    })
    _.forEach(pixels, (value, idx) => {
      frequencies[idx % spectrum][value]++
    })

    const expected   = _.size(pixels) / 256 / spectrum
    const chiSquares = _.times(spectrum, () => 0)

    for (let chan = 0; chan < spectrum; chan++) {
      for (let pixel = 0; pixel < 256; pixel++) {
        const pixelFreq = frequencies[chan][pixel] || 0
        const deltaFreq = pixelFreq - expected
        chiSquares[chan] += deltaFreq * deltaFreq
      }
    }

    for (let chan = 0; chan < spectrum; chan++) {
      chiSquares[chan] /= expected
    }

    return _.mean(chiSquares)
  }

  globalEntropyTest(pixels, spectrum = 3) {
    const frequencies = _.times(spectrum, () => {
      return _.times(256, () => 0)
    })
    _.forEach(pixels, (value, idx) => {
      frequencies[idx % spectrum][value]++
    })

    const imageSize = _.size(pixels) / spectrum
    const entropies = _.times(spectrum, () => 0)

    for (let chan = 0; chan < spectrum; chan++) {
      for (let pixel = 0; pixel < 256; pixel++) {
        const pixelFrequency = frequencies[chan][pixel]
        if (pixelFrequency > 0) {
          const probability = 1.0 * pixelFrequency / imageSize
          entropies[chan] -= probability * Math.log2(probability)
        }
      }
    }

    return _.mean(entropies)
  }

  mseTest(pixels1, pixels2, spectrum = 3) {
    if (!_.isArrayLikeObject(pixels1)
      || !_.isArrayLikeObject(pixels2)) {
      return 0
    }

    const sums      = _.times(spectrum, () => 0)
    const imageSize = _.size(pixels1) / spectrum

    _.forEach(pixels1, (value, idx) => {
      sums[idx % spectrum] += Math.pow(value - pixels2[idx], 2)
    })

    return _.mean(sums) / imageSize
  }

  npcrPercentage(pixels1, pixels2, spectrum = 3) {
    if (!_.isArrayLikeObject(pixels1)
      || !_.isArrayLikeObject(pixels2)) {
      return 0
    }

    const sums      = _.times(spectrum, () => 0)
    const imageSize = _.size(pixels1) / spectrum

    _.forEach(pixels1, (value, idx) => {
      sums[idx % spectrum] += +(value !== pixels2[idx])
    })

    return _.mean(sums) / imageSize * 100
  }

  sdValue(pixels) {
  	if (!_.isArrayLikeObject(pixels)) {
  		return undefined
  	}

  	const mean = _.mean(pixels)
  	const sum = _.sumBy(pixels, p => Math.pow(p - mean, 2))
  	return Math.sqrt(sum / pixels.length)
  }

  covValue(pixels1, pixels2) {
  	if (!_.isArrayLikeObject(pixels1)
      || !_.isArrayLikeObject(pixels2)) {
      return undefined
    }

  	const pixelsSize = _.size(pixels1)
    if (pixelsSize !== _.size(pixels2)) {
      return undefined
    }

    const mean1 = _.mean(pixels1)
  	const mean2 = _.mean(pixels2)

  	let sum = 0
    _.forEach(pixels1, (value, idx) => {
      sum += (pixels1[idx] - mean1) * (pixels2[idx] - mean2)
    })

    return sum / pixelsSize
  }

  correlationValue(pixels, width, height, direction = 'vertical', spectrum = 3) {
  	if (!_.isArrayLikeObject(pixels)) {
  		return undefined
  	}

  	const values1 = _.times(spectrum, () => new Array(10000))
  	const values2 = _.times(spectrum, () => new Array(10000))

  	for (let i = 0; i < 10000; i ++) {
  		const rand_x = _.random(0, width - 2)
  		const rand_y = _.random(0, height - 2)
  		const rand_idx = width * rand_y + rand_x

  		let adj_x = rand_x, adj_y = rand_y
  		if (direction === 'vertical') {
  			adj_y ++
  		}
  		else if (direction === 'horizontal') {
  			adj_x ++
  		}
  		else if (direction === 'diagonal') {
  			adj_y ++, adj_x ++
  		}
  		const adj_idx = width * adj_y + adj_x

  		for (let c = 0; c < spectrum; c++) {
  			values1[c][i] = pixels[rand_idx * spectrum + c]
  			values2[c][i] = pixels[adj_idx * spectrum + c]
  		}
  	}

  	const corr = _.times(spectrum, (c) => {
  		return this.covValue(values1[c], values2[c]) / 
  			(this.sdValue(values1[c]) * this.sdValue(values2[c]))
  	})

  	return _.mean(corr)
  }

  uaciPercentage(pixels1, pixels2, spectrum = 3) {
    if (!_.isArrayLikeObject(pixels1)
      || !_.isArrayLikeObject(pixels2)) {
      return 0
    }

    const sums      = _.times(spectrum, () => 0)
    const imageSize = _.size(pixels1) / spectrum

    _.forEach(pixels1, (value, idx) => {
      sums[idx % spectrum] += Math.abs(value - pixels2[idx]) / 255
    })

    return _.mean(sums) / imageSize * 100
  }

  toRgbUint8Array(pixels) {
    if (!_.isArrayLikeObject(pixels)) {
      return new Uint8Array(0)
    }
    const imageSize    = Math.floor(pixels.length / 4)
    const outputPixels = new Uint8Array(imageSize * 3)
    for (let idx = 0; idx < imageSize; idx++) {
      for (let chan = 0; chan < 3; chan++) {
        outputPixels[idx * 3 + chan] = pixels[idx * 4 + chan]
      }
    }
    return outputPixels
  }

  toRgbaUint8ClampedArray(pixels) {
    if (!_.isArrayLikeObject(pixels)) {
      return new Uint8Array(0)
    }
    const imageSize    = Math.floor(pixels.length / 3)
    const outputPixels = new Uint8ClampedArray(imageSize * 4)
    for (let idx = 0; idx < imageSize; idx++) {
      for (let chan = 0; chan < 3; chan++) {
        outputPixels[idx * 4 + chan] = pixels[idx * 3 + chan]
      }
      outputPixels[idx * 4 + 3] = 255
    }
    return outputPixels
  }

}

export default new PixelsUtils()