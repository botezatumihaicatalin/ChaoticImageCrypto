import path from "path"

import Jimp from "jimp"
import AsciiTable from "cli-table2"

import _ from "lodash"

import { println } from "./printing.js6"
import pxutils from "./pxutils.js6"

function analyzeCipher(name, options) {

  const images    = options.images
  const cipher    = options.cipher
  const cipherKey = options.cipherKey

  const readFilePath = (imagePath) => {
    return Jimp.read(imagePath)
  }

  const timeOperation = (method) => {
    let start = _.now()
    _.attempt(method)
    return _.now() - start
  }

  let fieldIdx            = 0
  const slightlyChangeKey = (cipherKey) => {
    const keyFields = _.keysIn(cipherKey)

    const fieldName = keyFields[fieldIdx]
    const fieldValue = cipherKey[fieldName]
    const clonedKey  = _.clone(cipherKey)

    clonedKey[fieldName] = _.isInteger(fieldValue)
      ? (fieldValue + 1) : (fieldValue + Math.pow(10, -5))

    fieldIdx = (fieldIdx + 1) % keyFields.length

    return clonedKey
  }

  const testSourceQuality = (bitmap, imagePath) => {
    const pixels = pxutils.toRgbUint8Array(bitmap.data)
    return {
      chiSquareValue:     pxutils.chiSquareTest(pixels),
      globalEntropyValue: pxutils.globalEntropyTest(pixels),
      dimensions:         [
        bitmap.width,
        bitmap.height
      ],
      name: path.basename(imagePath)
    }
  }

  const testEncryptionQuality = (bitmap) => {
    cipher.initKey(cipherKey)

    const pixels1 = pxutils.toRgbUint8Array(bitmap.data)
    const pixels2 = pxutils.toRgbUint8Array(bitmap.data)
    const randIx  = pixels1.length - 4
    pixels2[randIx]     = (pixels2[randIx] + 128) % 256
    pixels2[randIx + 1] = (pixels2[randIx + 1] + 128) % 256
    pixels2[randIx + 2] = (pixels2[randIx + 2] + 128) % 256

    let encrypted1        = undefined
    const encryptDuration = timeOperation(() => {
      encrypted1 = cipher.encrypt(pixels1)
    })
    const encrypted2 = cipher.encrypt(pixels2)

    return {
      chiSquareValue:     pxutils.chiSquareTest(encrypted1),
      globalEntropyValue: pxutils.globalEntropyTest(encrypted1),
      npcrPercentage:     pxutils.npcrPercentage(encrypted1, encrypted2),
      uaciPercentage:     pxutils.uaciPercentage(encrypted1, encrypted2),
      duration:           encryptDuration
    }
  }

  const testDecryptionQuality = (bitmap) => {
    const pixels = pxutils.toRgbUint8Array(bitmap.data)

    cipher.initKey(cipherKey)
    const encrypted = cipher.encrypt(pixels)

    let decrypted         = null
    const decryptDuration = timeOperation(() => {
      decrypted = cipher.decrypt(encrypted)
    })

    return {
      mseValue: pxutils.mseTest(pixels, decrypted),
      duration: decryptDuration
    }
  }

  const testKeySensitivity = (bitmap) => {
    const cipherKey1 = cipherKey
    const cipherKey2 = slightlyChangeKey(cipherKey1)
    const cipherKey3 = slightlyChangeKey(cipherKey1)
    const pixels     = pxutils.toRgbUint8Array(bitmap.data)

    cipher.initKey(cipherKey1)
    const encrypted = cipher.encrypt(pixels)

    let decrypted1        = null
    const decryptDuration = timeOperation(() => {
      decrypted1 = cipher.decrypt(encrypted)
    })

    cipher.initKey(cipherKey2)
    const decrypted2 = cipher.decrypt(encrypted)

    cipher.initKey(cipherKey3)
    const decrypted3 = cipher.decrypt(encrypted)

    return {
      npcrPercentage1: pxutils.npcrPercentage(pixels, decrypted2),
      uaciPercentage1: pxutils.uaciPercentage(pixels, decrypted2),
      npcrPercentage2: pxutils.npcrPercentage(decrypted2, decrypted3),
      uaciPercentage2: pxutils.uaciPercentage(decrypted2, decrypted3)
    }

  }

  const readAndTestImage = (imagePath) => {
    return readFilePath(imagePath).then((image) => ({
      source:     testSourceQuality(image.bitmap, imagePath),
      encryption: testEncryptionQuality(image.bitmap, imagePath),
      decryption: testDecryptionQuality(image.bitmap, imagePath),
      keyQuality: testKeySensitivity(image.bitmap, imagePath)
    }))
  }

  const printOutputs = (outputs) => {
    const decimals = 7

    const asciiTable = new AsciiTable({
      head: [
        {
          colSpan: 12,
          content: name,
          hAlign:  "center"
        }
      ]
    })

    asciiTable.push(
      [
        {
          content: "#",
          rowSpan: 2,
          vAlign:  "center"
        },
        {
          colSpan: 3,
          content: "Source Quality",
          hAlign:  "center"
        },
        {
          colSpan: 5,
          content: "Encryption Quality",
          hAlign:  "center"
        },
        {
          colSpan: 2,
          content: "Decryption Quality",
          hAlign:  "center"
        },
        {
          colSpan: 2,
          content: "Key Sensitivity",
          hAlign:  "center"
        }
      ]
    )

    asciiTable.push(
      [
        "Chi square",
        "Global entropy",
        "Dimensions",
        "Chi square",
        "Global entropy",
        "NPCR (%)",
        "UACI (%)",
        "Duration",
        "MSE",
        "Duration",
        "NPCR (%)",
        "UACI (%)"
      ]
    )

    _.forEach(outputs, output => {
      const {source, encryption, decryption, keyQuality} = output

      asciiTable.push(
        [
          source.name,
          source.chiSquareValue.toFixed(6),
          source.globalEntropyValue.toFixed(9),
          source.dimensions.join(" x "),
          encryption.chiSquareValue.toFixed(6),
          encryption.globalEntropyValue.toFixed(9),
          encryption.npcrPercentage.toFixed(6) + "%",
          encryption.uaciPercentage.toFixed(6) + "%",
          encryption.duration + " ms",
          decryption.mseValue.toFixed(6),
          decryption.duration + " ms",
          keyQuality.npcrPercentage1.toFixed(6) + "%",
          keyQuality.uaciPercentage1.toFixed(6) + "%"
        ]
      )
    })

    println(asciiTable.toString())
  }

  const outputs = [ ]
  let promise   = Promise.resolve()
  _.forEach(images, imagePath => {
    promise = promise.then(() => readAndTestImage(imagePath))
      .then(output => outputs.push(output))
  })
  return promise.then(() => printOutputs(outputs))
}

export default analyzeCipher